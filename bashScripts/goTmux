
#!/usr/bin/env bash

PERSONAL="~"
DIPPER="~/dipper"
ROBOTIX="~/robotix"
PEER_COLLECTIVE="~/peercollective"

createWindow() {
    session=$1
    window=$2
    shift
    shift
    hasWindow=$(tmux list-windows -t $session | grep "$window")
    if [ -z "$hasWindow" ]; then
        cmd="tmux neww -t $session: -n $window -d"
        if [ $# -gt 0 ]; then
            cmd="$cmd $@"
        fi
        echo "Creating Window(\"$hasWindow\"): $cmd"
        eval $cmd
    fi
}

createSession() {
    session=$1
    window=$2
    shift
    shift
    cmd="tmux new -s $session -d -n $window $@ > /dev/null 2>&1"

    echo "Creating Session: $cmd"
    eval $cmd
}

while [ "$#" -gt 0 ]; do
    curr=$1
    shift

    case "$curr" in
    "-dipper")
        createSession dipper app -c $DIPPER/app "ranger"
        createWindow dipper api -c $DIPPER/api "ranger"
        ;;
    "-peer")
        createSession peer app -c $PEER_COLLECTIVE/app "ranger"
        createWindow peer api -c $PEER_COLLECTIVE/api "ranger"
        createWindow peer run-app -c $PEER_COLLECTIVE/app "npm start"
        createWindow peer run-api -c $PEER_COLLECTIVE/api "docker-compose -f docker/docker-compose.yml up --build"
        ;;
    "-robotix")
        createSession robotix app -c $ROBOTIX/app "ranger"
        createWindow robotix admin -c $ROBOTIX/admin "ranger"
        createWindow robotix api -c $ROBOTIX/api "ranger"
        createWindow robotix run-app -c $ROBOTIX/app "npm start"
        createWindow robotix run-admin -c $ROBOTIX/admin "npm start"
        createWindow robotix run-api -c $ROBOTIX/api "npm run start:dev"
        ;;
    "-personal")
        createSession personal console 
        createWindow personal ranger -c $PERSONAL "ranger"
        ;;
    *) echo "Unavailable command... $curr"
    esac
done
